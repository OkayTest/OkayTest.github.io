{"version":3,"sources":["PropertyCard.js","Modal.js","App.js","serviceWorker.js","index.js"],"names":["PropertyCard","props","state","reload","propertyID","console","log","localStorage","getItem","removeItem","setItem","this","setState","loadFavourite","property","className","style","minWidth","key","id","src","propertyPhoto","alt","buildingName","districtName","streetNo","streetName","netSize","bedrooms","bathrooms","onClick","handleFavouriteClick","salePrice","React","Component","Modal","data","active","disableModal","favourite","aria-label","map","App","loaded","error","modalActive","bind","fetch","then","status","json","loadfavourite","catch","e","i","length","Object","keys","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7661f41f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nclass PropertyCard extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      reload: false\r\n    };\r\n  }\r\n\r\n  handleFavouriteClick(propertyID) {\r\n    console.log(propertyID);\r\n    if (localStorage.getItem(propertyID)) {\r\n      localStorage.removeItem(propertyID);\r\n    } else {\r\n      localStorage.setItem(propertyID, \"active\");\r\n    }\r\n    this.setState({ reload: !this.state.reload });\r\n    this.props.loadFavourite();\r\n  }\r\n\r\n  render() {\r\n    const { property } = this.props;\r\n    let width = 400;\r\n    return (\r\n      <div\r\n        className=\"column is-one-third is-flex\"\r\n        style={{ minWidth: width }}\r\n        key={property.id}\r\n      >\r\n        <div className=\"card card-container\">\r\n          <figure className=\"image\">\r\n            <img\r\n              src={property.propertyPhoto}\r\n              alt=\"cardimg\"\r\n              className=\"card-image\"\r\n            />\r\n          </figure>\r\n          <div className=\"card-content has-text-left card-block\">\r\n            <span className=\"title is-5\">{property.buildingName}</span>\r\n            <div className=\"content is-size-7\">\r\n              {property.districtName}\r\n              <br />\r\n              <i className=\"fas fa-map-marker-alt\" />&nbsp;\r\n              {property.streetNo}&nbsp;{property.streetName}\r\n              <br />\r\n            </div>\r\n            <div className=\"content is-size-6 has-text-grey-dark\">\r\n              {property.netSize}&nbsp;<span className=\"is-size-7\">sqft</span>\r\n              &nbsp;&nbsp;\r\n              {property.bedrooms === 0 ? \"Studio\" : `${property.bedrooms}`}{\" \"}\r\n              <i className=\"fas fa-bed\" />\r\n              &nbsp;&nbsp;\r\n              {property.bathrooms}&nbsp;<i className=\"fas fa-shower\" />\r\n              <br />\r\n              <div\r\n                className={`heart-icon ${localStorage.getItem(property.id)\r\n                  ? \"has-text-danger\"\r\n                  : \"has-text-grey-light\"}`}\r\n              >\r\n                <i\r\n                  className=\"fas fa-heart\"\r\n                  onClick={() => this.handleFavouriteClick(property.id)}\r\n                />\r\n              </div>\r\n              <div className=\"price is-size-5 has-text-weight-medium\">\r\n                HK${property.salePrice / 10 ** 6}M\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PropertyCard;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport PropertyCard from './PropertyCard';\r\n\r\nclass Modal extends React.Component {\r\n\r\n  render() {\r\n    const { data, active, disableModal, favourite, loadFavourite } = this.props\r\n    console.log(data, favourite)\r\n    return (\r\n\r\n      <div className={`modal ${active ? 'is-active' : ''}`}>\r\n        <div className=\"modal-background\" onClick={() => disableModal()}></div>\r\n        <div className=\"modal-card\">\r\n          <header className=\"modal-card-head\">\r\n            <p className=\"modal-card-title\">Your Favourite List</p>\r\n            <button className=\"delete\" aria-label=\"close\" onClick={() => disableModal()} ></button>\r\n          </header>\r\n          <section className=\"modal-card-body\">\r\n            <div className=\"properties-wrapper\">\r\n              <div className=\"columns is-multiline is-marginless is-paddingless is-mobile is-centered\">\r\n              \r\n                {data.map((property) => {\r\n                  if (favourite[property.id]) {\r\n                    return (\r\n                      <PropertyCard\r\n                        key={property.id}\r\n                        property={property}\r\n                        handleFavouriteClick={this.handleFavouriteClick}\r\n                        loadFavourite={loadFavourite}\r\n                      />\r\n                    )\r\n                  }\r\n                })}\r\n              </div>\r\n            </div>\r\n          </section>\r\n          <footer className=\"modal-card-foot\">\r\n           \r\n          </footer>\r\n        </div>\r\n      </div>\r\n\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Modal;\r\n\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport PropertyCard from \"./PropertyCard\";\r\nimport Modal from \"./Modal\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: [],\r\n      loaded: false,\r\n      error: false,\r\n      modalActive: false,\r\n      favourite: {}\r\n    };\r\n\r\n    this.disableModal = this.disableModal.bind(this);\r\n    this.loadFavourite = this.loadFavourite.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(`https://my-json-server.typicode.com/roycwc/jsonserver/properties`)\r\n      .then(data => {\r\n        if (data.status === 200) {\r\n          data.json().then(data => {\r\n            this.setState(\r\n              {\r\n                data,\r\n                loaded: true,\r\n                error: false\r\n              },\r\n              this.loadfavourite\r\n            );\r\n          });\r\n        } else {\r\n          console.log(\"ERROR\");\r\n        }\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n        this.setState({ error: true });\r\n      });\r\n  }\r\n\r\n  disableModal() {\r\n    this.setState({ modalActive: false });\r\n  }\r\n\r\n  loadFavourite() {\r\n    console.log(\"load\");\r\n    const { data } = this.state;\r\n    let favourite = {};\r\n    for (let i = 0; i < data.length; i++) {\r\n      if (localStorage.getItem(data[i].id)) {\r\n        favourite[data[i].id] = true;\r\n      }\r\n    }\r\n    this.setState({ favourite: favourite });\r\n  }\r\n\r\n  render() {\r\n    const { data, error, loaded, modalActive, favourite } = this.state;\r\n    console.log(data, favourite);\r\n    return (\r\n      <div className=\"App\">\r\n        {error ? \"No internet connection. Please refresh and try again\" : \"\"}\r\n        {!loaded && !error ? <i className=\"fas fa-spinner fa-spin\" /> : \"\"}\r\n        <br />\r\n        <button\r\n          className=\"button\"\r\n          onClick={() => this.setState({ modalActive: true })}\r\n        >\r\n          {Object.keys(favourite).length}\r\n          &nbsp; Favourites &nbsp;\r\n          <i className=\"fas fa-heart has-text-danger\" />\r\n        </button>\r\n        <Modal\r\n          data={data}\r\n          active={modalActive}\r\n          disableModal={this.disableModal}\r\n          favourite={favourite}\r\n          loadFavourite={this.loadFavourite}\r\n        />\r\n        <div className=\"container\">\r\n          <div className=\"columns is-multiline is-marginless is-paddingless is-centered is-mobile\">\r\n            {data.map(property => {\r\n              return (\r\n                <PropertyCard\r\n                  key={property.id}\r\n                  property={property}\r\n                  handleFavouriteClick={this.handleFavouriteClick}\r\n                  loadFavourite={this.loadFavourite}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bulma'\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}